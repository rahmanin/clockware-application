// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Render Loader when loading = true 1`] = `
"<Provider store={{...}}>
  <Diagrams>
    <Loader>
      <div className=\\"isLoading\\">
        <div className=\\"circle c_1\\" />
        <div className=\\"circle c_2\\" />
        <div className=\\"circle c_3\\" />
      </div>
    </Loader>
  </Diagrams>
</Provider>"
`;

exports[`Should toggle loading on false and render whole component 1`] = `
"<Provider store={{...}}>
  <Diagrams>
    <div className=\\"wrapper_charts\\">
      <ForwardRef(InternalForm) className=\\"diagram_form\\">
        <SizeContextProvider size={[undefined]}>
          <ForwardRef(Form) id={[undefined]} name={[undefined]} onFinishFailed={[Function: onInternalFinishFailed]} form={{...}} className=\\"ant-form ant-form-horizontal diagram_form\\">
            <form id={[undefined]} className=\\"ant-form ant-form-horizontal diagram_form\\" onSubmit={[Function: onSubmit]}>
              <FormItem className=\\"diagram_form_item\\">
                <Row className=\\"ant-form-item diagram_form_item\\" style={[undefined]}>
                  <div className=\\"ant-row ant-form-item diagram_form_item\\" style={{...}}>
                    <FormItemLabel htmlFor={[undefined]} required={[undefined]} requiredMark={true} className=\\"diagram_form_item\\" prefixCls=\\"ant-form\\" />
                    <FormItemInput className=\\"diagram_form_item\\" errors={{...}} prefixCls=\\"ant-form\\" status=\\"\\" onDomErrorVisibleChange={[Function: setDomErrorVisible]} validateStatus=\\"\\">
                      <Col className=\\"ant-form-item-control\\">
                        <div style={{...}} className=\\"ant-col ant-form-item-control\\">
                          <div className=\\"ant-form-item-control-input\\">
                            <div className=\\"ant-form-item-control-input-content\\">
                              <RangePicker style={{...}} onChange={[Function: onChange]} value={{...}}>
                                <LocaleReceiver componentName=\\"DatePicker\\" defaultLocale={[Function (anonymous)]}>
                                  <RangePicker separator={{...}} placeholder={{...}} suffixIcon={{...}} clearIcon={{...}} allowClear={true} transitionName=\\"slide-up\\" style={{...}} onChange={[Function: onChange]} value={{...}} className=\\"\\" locale={{...}} prefixCls=\\"ant-picker\\" getPopupContainer={[undefined]} generateConfig={{...}} prevIcon={{...}} nextIcon={{...}} superPrevIcon={{...}} superNextIcon={{...}} components={{...}} direction={[undefined]}>
                                    <InnerRangePicker separator={{...}} placeholder={{...}} suffixIcon={{...}} clearIcon={{...}} allowClear={true} transitionName=\\"slide-up\\" style={{...}} onChange={[Function: onChange]} value={{...}} className=\\"\\" locale={{...}} prefixCls=\\"ant-picker\\" getPopupContainer={[undefined]} generateConfig={{...}} prevIcon={{...}} nextIcon={{...}} superPrevIcon={{...}} superNextIcon={{...}} components={{...}} direction={[undefined]} pickerRef={{...}}>
                                      <PickerTrigger visible={false} popupElement={{...}} popupStyle={[undefined]} prefixCls=\\"ant-picker\\" dropdownClassName={[undefined]} dropdownAlign={[undefined]} getPopupContainer={[undefined]} transitionName=\\"slide-up\\" range={true} direction={[undefined]}>
                                        <Trigger showAction={{...}} hideAction={{...}} popupPlacement=\\"bottomLeft\\" builtinPlacements={{...}} prefixCls=\\"ant-picker-dropdown\\" popupTransitionName=\\"slide-up\\" popup={{...}} popupAlign={{...}} popupVisible={false} popupClassName=\\"ant-picker-dropdown-range\\" popupStyle={{...}} getPopupContainer={[undefined]} getPopupClassNameFromAlign={[Function: returnEmptyString]} getDocument={[Function: returnDocument]} onPopupVisibleChange={[Function: noop]} afterPopupVisibleChange={[Function: noop]} onPopupAlign={[Function: noop]} mouseEnterDelay={0} mouseLeaveDelay={0.1} focusDelay={0} blurDelay={0.15} destroyPopupOnHide={false} defaultPopupVisible={false} mask={false} maskClosable={true} action={{...}} autoDestroy={false}>
                                          <div className=\\"ant-picker ant-picker-range\\" style={{...}} onClick={[Function: onPickerClick]} onMouseDown={[Function: onPickerMouseDown]} onContextMenu={[undefined]} onTouchStart={[undefined]} onMouseEnter={[undefined]} onMouseLeave={[undefined]} onFocus={[undefined]} onBlur={[undefined]}>
                                            <div className=\\"ant-picker-input ant-picker-input-active\\">
                                              <input id={[undefined]} disabled={false} readOnly={true} value=\\"\\" onChange={[Function: onChange]} autoFocus={[undefined]} placeholder=\\"Start date\\" onMouseDown={[Function: onMouseDown]} onKeyDown={[Function: onKeyDown]} onFocus={[Function: onFocus]} onBlur={[Function: onBlur]} size={12} autoComplete=\\"off\\" />
                                            </div>
                                            <div className=\\"ant-picker-range-separator\\">
                                              <span aria-label=\\"to\\" className=\\"ant-picker-separator\\">
                                                <ForwardRef(SwapRightOutlined)>
                                                  <AntdIcon icon={{...}}>
                                                    <span role=\\"img\\" aria-label=\\"swap-right\\" tabIndex={[undefined]} onClick={[undefined]} className=\\"anticon anticon-swap-right\\">
                                                      <IconReact icon={{...}} primaryColor={[undefined]} secondaryColor={[undefined]} style={[undefined]}>
                                                        <svg viewBox=\\"0 0 1024 1024\\" focusable=\\"false\\" className={[undefined]} onClick={[undefined]} style={[undefined]} data-icon=\\"swap-right\\" width=\\"1em\\" height=\\"1em\\" fill=\\"currentColor\\" aria-hidden=\\"true\\">
                                                          <path d=\\"M873.1 596.2l-164-208A32 32 0 00684 376h-64.8c-6.7 0-10.4 7.7-6.3 13l144.3 183H152c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h695.9c26.8 0 41.7-30.8 25.2-51.8z\\" />
                                                        </svg>
                                                      </IconReact>
                                                    </span>
                                                  </AntdIcon>
                                                </ForwardRef(SwapRightOutlined)>
                                              </span>
                                            </div>
                                            <div className=\\"ant-picker-input\\">
                                              <input disabled={false} readOnly={true} value=\\"\\" onChange={[Function: onChange]} placeholder=\\"End date\\" onMouseDown={[Function: onMouseDown]} onKeyDown={[Function: onKeyDown]} onFocus={[Function: onFocus]} onBlur={[Function: onBlur]} size={12} autoComplete=\\"off\\" />
                                            </div>
                                            <div className=\\"ant-picker-active-bar\\" style={{...}} />
                                            <span className=\\"ant-picker-suffix\\">
                                              <ForwardRef(CalendarOutlined)>
                                                <AntdIcon icon={{...}}>
                                                  <span role=\\"img\\" aria-label=\\"calendar\\" tabIndex={[undefined]} onClick={[undefined]} className=\\"anticon anticon-calendar\\">
                                                    <IconReact icon={{...}} primaryColor={[undefined]} secondaryColor={[undefined]} style={[undefined]}>
                                                      <svg viewBox=\\"64 64 896 896\\" focusable=\\"false\\" className={[undefined]} onClick={[undefined]} style={[undefined]} data-icon=\\"calendar\\" width=\\"1em\\" height=\\"1em\\" fill=\\"currentColor\\" aria-hidden=\\"true\\">
                                                        <path d=\\"M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z\\" />
                                                      </svg>
                                                    </IconReact>
                                                  </span>
                                                </AntdIcon>
                                              </ForwardRef(CalendarOutlined)>
                                            </span>
                                          </div>
                                        </Trigger>
                                      </PickerTrigger>
                                    </InnerRangePicker>
                                  </RangePicker>
                                </LocaleReceiver>
                              </RangePicker>
                            </div>
                          </div>
                          <ErrorList errors={{...}} help={[undefined]} onDomErrorVisibleChange={[Function: setDomErrorVisible]}>
                            <CSSMotion motionDeadline={500} visible={false} motionName=\\"show-help\\" onLeaveEnd={[Function: onLeaveEnd]} motionAppear={true} removeOnLeave={true}>
                              <DomWrapper />
                            </CSSMotion>
                          </ErrorList>
                        </div>
                      </Col>
                    </FormItemInput>
                  </div>
                </Row>
              </FormItem>
              <FormItem className=\\"diagram_form_item\\">
                <Row className=\\"ant-form-item diagram_form_item\\" style={[undefined]}>
                  <div className=\\"ant-row ant-form-item diagram_form_item\\" style={{...}}>
                    <FormItemLabel htmlFor={[undefined]} required={[undefined]} requiredMark={true} className=\\"diagram_form_item\\" prefixCls=\\"ant-form\\" />
                    <FormItemInput className=\\"diagram_form_item\\" errors={{...}} prefixCls=\\"ant-form\\" status=\\"\\" onDomErrorVisibleChange={[Function: setDomErrorVisible]} validateStatus=\\"\\">
                      <Col className=\\"ant-form-item-control\\">
                        <div style={{...}} className=\\"ant-col ant-form-item-control\\">
                          <div className=\\"ant-form-item-control-input\\">
                            <div className=\\"ant-form-item-control-input-content\\">
                              <ForwardRef(InternalSelect) style={{...}} mode=\\"multiple\\" onChange={[Function: onChange]} value={{...}} placeholder=\\"Cities\\">
                                <Select virtual={[undefined]} dropdownMatchSelectWidth={[undefined]} style={{...}} mode=\\"multiple\\" onChange={[Function: onChange]} value={{...}} placeholder=\\"Cities\\" transitionName=\\"slide-up\\" listHeight={256} listItemHeight={24} prefixCls=\\"ant-select\\" direction={[undefined]} inputIcon={[Function: mergedSuffixIcon]} menuItemSelectedIcon={{...}} removeIcon={{...}} clearIcon={{...}} notFoundContent={{...}} className=\\"\\" getPopupContainer={[undefined]} dropdownClassName=\\"\\">
                                  <ForwardRef(Select) virtual={[undefined]} dropdownMatchSelectWidth={[undefined]} style={{...}} mode=\\"multiple\\" onChange={[Function: onChange]} value={{...}} placeholder=\\"Cities\\" transitionName=\\"slide-up\\" listHeight={256} listItemHeight={24} prefixCls=\\"ant-select\\" direction={[undefined]} inputIcon={[Function: mergedSuffixIcon]} menuItemSelectedIcon={{...}} removeIcon={{...}} clearIcon={{...}} notFoundContent={{...}} className=\\"\\" getPopupContainer={[undefined]} dropdownClassName=\\"\\">
                                    <div className=\\"ant-select ant-select-multiple ant-select-show-search\\" style={{...}} onMouseDown={[Function: onInternalMouseDown]} onKeyDown={[Function: onInternalKeyDown]} onKeyUp={[Function: onInternalKeyUp]} onFocus={[Function: onContainerFocus]} onBlur={[Function: onContainerBlur]}>
                                      <SelectTrigger disabled={[undefined]} prefixCls=\\"ant-select\\" visible={[undefined]} popupElement={{...}} containerWidth={{...}} animation={[undefined]} transitionName=\\"slide-up\\" dropdownStyle={[undefined]} dropdownClassName=\\"\\" direction={[undefined]} dropdownMatchSelectWidth={[undefined]} dropdownRender={[undefined]} dropdownAlign={[undefined]} getPopupContainer={[undefined]} empty={false} getTriggerDOMNode={[Function: getTriggerDOMNode]}>
                                        <Trigger showAction={{...}} hideAction={{...}} popupPlacement=\\"bottomLeft\\" builtinPlacements={{...}} prefixCls=\\"ant-select-dropdown\\" popupTransitionName=\\"slide-up\\" popup={{...}} popupAlign={{...}} popupVisible={[undefined]} getPopupContainer={[undefined]} popupClassName=\\"\\" popupStyle={{...}} getTriggerDOMNode={[Function: getTriggerDOMNode]} getPopupClassNameFromAlign={[Function: returnEmptyString]} getDocument={[Function: returnDocument]} onPopupVisibleChange={[Function: noop]} afterPopupVisibleChange={[Function: noop]} onPopupAlign={[Function: noop]} mouseEnterDelay={0} mouseLeaveDelay={0.1} focusDelay={0} blurDelay={0.15} destroyPopupOnHide={false} defaultPopupVisible={false} mask={false} maskClosable={true} action={{...}} autoDestroy={false}>
                                          <Selector virtual={[undefined]} dropdownMatchSelectWidth={[undefined]} style={{...}} mode=\\"multiple\\" onChange={[Function: onChange]} value={{...}} placeholder=\\"Cities\\" transitionName=\\"slide-up\\" listHeight={256} listItemHeight={24} prefixCls=\\"ant-select\\" direction={[undefined]} inputIcon={[Function: mergedSuffixIcon]} menuItemSelectedIcon={{...}} removeIcon={{...}} clearIcon={{...}} notFoundContent={{...}} className=\\"\\" getPopupContainer={[undefined]} dropdownClassName=\\"\\" domRef={{...}} inputElement={{...}} id=\\"rc_select_TEST_OR_SSR\\" showSearch={true} accessibilityIndex={0} multiple={true} tagRender={[undefined]} values={{...}} open={[undefined]} onToggleOpen={[Function: onToggleOpen]} searchValue=\\"\\" activeValue={{...}} onSearch={[Function: triggerSearch]} onSearchSubmit={[Function: onSearchSubmit]} onSelect={[Function: onInternalSelectionSelect]} tokenWithEnter={false} onContextMenu={[undefined]} onClick={[undefined]} onMouseDown={[undefined]} onTouchStart={[undefined]} onMouseEnter={[undefined]} onMouseLeave={[undefined]} onFocus={[undefined]} onBlur={[undefined]}>
                                            <div className=\\"ant-select-selector\\" onClick={[Function: onClick]} onMouseDown={[Function: onMouseDown]}>
                                              <SelectSelector virtual={[undefined]} dropdownMatchSelectWidth={[undefined]} style={{...}} mode=\\"multiple\\" onChange={[Function: onChange]} value={{...}} placeholder=\\"Cities\\" transitionName=\\"slide-up\\" listHeight={256} listItemHeight={24} prefixCls=\\"ant-select\\" direction={[undefined]} inputIcon={[Function: mergedSuffixIcon]} menuItemSelectedIcon={{...}} removeIcon={{...}} clearIcon={{...}} notFoundContent={{...}} className=\\"\\" getPopupContainer={[undefined]} dropdownClassName=\\"\\" domRef={{...}} inputElement={{...}} id=\\"rc_select_TEST_OR_SSR\\" showSearch={true} accessibilityIndex={0} multiple={true} tagRender={[undefined]} values={{...}} open={[undefined]} onToggleOpen={[Function: onToggleOpen]} searchValue=\\"\\" activeValue={{...}} onSearch={[Function: triggerSearch]} onSearchSubmit={[Function: onSearchSubmit]} onSelect={[Function: onInternalSelectionSelect]} tokenWithEnter={false} onContextMenu={[undefined]} onClick={[undefined]} onMouseDown={[undefined]} onTouchStart={[undefined]} onMouseEnter={[undefined]} onMouseLeave={[undefined]} onFocus={[undefined]} onBlur={[undefined]} inputRef={{...}} onInputKeyDown={[Function: onInternalInputKeyDown]} onInputMouseDown={[Function: onInternalInputMouseDown]} onInputChange={[Function: onInputChange]} onInputPaste={[Function: onInputPaste]} onInputCompositionStart={[Function: onInputCompositionStart]} onInputCompositionEnd={[Function: onInputCompositionEnd]}>
                                                <CSSMotionList component={false} keys={{...}} motionName={[undefined]} motionAppear={true} />
                                                <span className=\\"ant-select-selection-search\\" style={{...}} onFocus={[Function: onFocus]} onBlur={[Function: onBlur]}>
                                                  <Input open={[undefined]} prefixCls=\\"ant-select\\" id=\\"rc_select_TEST_OR_SSR\\" inputElement={{...}} disabled={[undefined]} autoFocus={[undefined]} autoComplete={[undefined]} editable={false} accessibilityIndex={0} value=\\"\\" onKeyDown={[Function: onInternalInputKeyDown]} onMouseDown={[Function: onInternalInputMouseDown]} onChange={[Function: onInputChange]} onPaste={[Function: onInputPaste]} onCompositionStart={[Function: onInputCompositionStart]} onCompositionEnd={[Function: onInputCompositionEnd]} tabIndex={[undefined]} attrs={{...}}>
                                                    <input id=\\"rc_select_TEST_OR_SSR\\" disabled={[undefined]} tabIndex={[undefined]} autoComplete=\\"off\\" type=\\"search\\" autoFocus={[undefined]} className=\\"ant-select-selection-search-input\\" style={{...}} role=\\"combobox\\" aria-expanded={[undefined]} aria-haspopup=\\"listbox\\" aria-owns=\\"rc_select_TEST_OR_SSR_list\\" aria-autocomplete=\\"list\\" aria-controls=\\"rc_select_TEST_OR_SSR_list\\" aria-activedescendant=\\"rc_select_TEST_OR_SSR_list_0\\" value=\\"\\" maxLength={[undefined]} readOnly={true} unselectable=\\"on\\" onKeyDown={[Function: onKeyDown]} onMouseDown={[Function: onMouseDown]} onChange={[Function: onChange]} onCompositionStart={[Function: onCompositionStart]} onCompositionEnd={[Function: onCompositionEnd]} onPaste={[Function: onInputPaste]} />
                                                  </Input>
                                                  <span className=\\"ant-select-selection-search-mirror\\" aria-hidden={true}>
                                                     
                                                  </span>
                                                </span>
                                                <span className=\\"ant-select-selection-placeholder\\">
                                                  Cities
                                                </span>
                                              </SelectSelector>
                                            </div>
                                          </Selector>
                                        </Trigger>
                                      </SelectTrigger>
                                    </div>
                                  </ForwardRef(Select)>
                                </Select>
                              </ForwardRef(InternalSelect)>
                            </div>
                          </div>
                          <ErrorList errors={{...}} help={[undefined]} onDomErrorVisibleChange={[Function: setDomErrorVisible]}>
                            <CSSMotion motionDeadline={500} visible={false} motionName=\\"show-help\\" onLeaveEnd={[Function: onLeaveEnd]} motionAppear={true} removeOnLeave={true}>
                              <DomWrapper />
                            </CSSMotion>
                          </ErrorList>
                        </div>
                      </Col>
                    </FormItemInput>
                  </div>
                </Row>
              </FormItem>
              <FormItem className=\\"diagram_form_item\\">
                <Row className=\\"ant-form-item diagram_form_item\\" style={[undefined]}>
                  <div className=\\"ant-row ant-form-item diagram_form_item\\" style={{...}}>
                    <FormItemLabel htmlFor={[undefined]} required={[undefined]} requiredMark={true} className=\\"diagram_form_item\\" prefixCls=\\"ant-form\\" />
                    <FormItemInput className=\\"diagram_form_item\\" errors={{...}} prefixCls=\\"ant-form\\" status=\\"\\" onDomErrorVisibleChange={[Function: setDomErrorVisible]} validateStatus=\\"\\">
                      <Col className=\\"ant-form-item-control\\">
                        <div style={{...}} className=\\"ant-col ant-form-item-control\\">
                          <div className=\\"ant-form-item-control-input\\">
                            <div className=\\"ant-form-item-control-input-content\\">
                              <ForwardRef(InternalSelect) style={{...}} mode=\\"multiple\\" onChange={[Function: onChange]} value={{...}} placeholder=\\"Masters\\">
                                <Select virtual={[undefined]} dropdownMatchSelectWidth={[undefined]} style={{...}} mode=\\"multiple\\" onChange={[Function: onChange]} value={{...}} placeholder=\\"Masters\\" transitionName=\\"slide-up\\" listHeight={256} listItemHeight={24} prefixCls=\\"ant-select\\" direction={[undefined]} inputIcon={[Function: mergedSuffixIcon]} menuItemSelectedIcon={{...}} removeIcon={{...}} clearIcon={{...}} notFoundContent={{...}} className=\\"\\" getPopupContainer={[undefined]} dropdownClassName=\\"\\">
                                  <ForwardRef(Select) virtual={[undefined]} dropdownMatchSelectWidth={[undefined]} style={{...}} mode=\\"multiple\\" onChange={[Function: onChange]} value={{...}} placeholder=\\"Masters\\" transitionName=\\"slide-up\\" listHeight={256} listItemHeight={24} prefixCls=\\"ant-select\\" direction={[undefined]} inputIcon={[Function: mergedSuffixIcon]} menuItemSelectedIcon={{...}} removeIcon={{...}} clearIcon={{...}} notFoundContent={{...}} className=\\"\\" getPopupContainer={[undefined]} dropdownClassName=\\"\\">
                                    <div className=\\"ant-select ant-select-multiple ant-select-show-search\\" style={{...}} onMouseDown={[Function: onInternalMouseDown]} onKeyDown={[Function: onInternalKeyDown]} onKeyUp={[Function: onInternalKeyUp]} onFocus={[Function: onContainerFocus]} onBlur={[Function: onContainerBlur]}>
                                      <SelectTrigger disabled={[undefined]} prefixCls=\\"ant-select\\" visible={[undefined]} popupElement={{...}} containerWidth={{...}} animation={[undefined]} transitionName=\\"slide-up\\" dropdownStyle={[undefined]} dropdownClassName=\\"\\" direction={[undefined]} dropdownMatchSelectWidth={[undefined]} dropdownRender={[undefined]} dropdownAlign={[undefined]} getPopupContainer={[undefined]} empty={false} getTriggerDOMNode={[Function: getTriggerDOMNode]}>
                                        <Trigger showAction={{...}} hideAction={{...}} popupPlacement=\\"bottomLeft\\" builtinPlacements={{...}} prefixCls=\\"ant-select-dropdown\\" popupTransitionName=\\"slide-up\\" popup={{...}} popupAlign={{...}} popupVisible={[undefined]} getPopupContainer={[undefined]} popupClassName=\\"\\" popupStyle={{...}} getTriggerDOMNode={[Function: getTriggerDOMNode]} getPopupClassNameFromAlign={[Function: returnEmptyString]} getDocument={[Function: returnDocument]} onPopupVisibleChange={[Function: noop]} afterPopupVisibleChange={[Function: noop]} onPopupAlign={[Function: noop]} mouseEnterDelay={0} mouseLeaveDelay={0.1} focusDelay={0} blurDelay={0.15} destroyPopupOnHide={false} defaultPopupVisible={false} mask={false} maskClosable={true} action={{...}} autoDestroy={false}>
                                          <Selector virtual={[undefined]} dropdownMatchSelectWidth={[undefined]} style={{...}} mode=\\"multiple\\" onChange={[Function: onChange]} value={{...}} placeholder=\\"Masters\\" transitionName=\\"slide-up\\" listHeight={256} listItemHeight={24} prefixCls=\\"ant-select\\" direction={[undefined]} inputIcon={[Function: mergedSuffixIcon]} menuItemSelectedIcon={{...}} removeIcon={{...}} clearIcon={{...}} notFoundContent={{...}} className=\\"\\" getPopupContainer={[undefined]} dropdownClassName=\\"\\" domRef={{...}} inputElement={{...}} id=\\"rc_select_TEST_OR_SSR\\" showSearch={true} accessibilityIndex={0} multiple={true} tagRender={[undefined]} values={{...}} open={[undefined]} onToggleOpen={[Function: onToggleOpen]} searchValue=\\"\\" activeValue={{...}} onSearch={[Function: triggerSearch]} onSearchSubmit={[Function: onSearchSubmit]} onSelect={[Function: onInternalSelectionSelect]} tokenWithEnter={false} onContextMenu={[undefined]} onClick={[undefined]} onMouseDown={[undefined]} onTouchStart={[undefined]} onMouseEnter={[undefined]} onMouseLeave={[undefined]} onFocus={[undefined]} onBlur={[undefined]}>
                                            <div className=\\"ant-select-selector\\" onClick={[Function: onClick]} onMouseDown={[Function: onMouseDown]}>
                                              <SelectSelector virtual={[undefined]} dropdownMatchSelectWidth={[undefined]} style={{...}} mode=\\"multiple\\" onChange={[Function: onChange]} value={{...}} placeholder=\\"Masters\\" transitionName=\\"slide-up\\" listHeight={256} listItemHeight={24} prefixCls=\\"ant-select\\" direction={[undefined]} inputIcon={[Function: mergedSuffixIcon]} menuItemSelectedIcon={{...}} removeIcon={{...}} clearIcon={{...}} notFoundContent={{...}} className=\\"\\" getPopupContainer={[undefined]} dropdownClassName=\\"\\" domRef={{...}} inputElement={{...}} id=\\"rc_select_TEST_OR_SSR\\" showSearch={true} accessibilityIndex={0} multiple={true} tagRender={[undefined]} values={{...}} open={[undefined]} onToggleOpen={[Function: onToggleOpen]} searchValue=\\"\\" activeValue={{...}} onSearch={[Function: triggerSearch]} onSearchSubmit={[Function: onSearchSubmit]} onSelect={[Function: onInternalSelectionSelect]} tokenWithEnter={false} onContextMenu={[undefined]} onClick={[undefined]} onMouseDown={[undefined]} onTouchStart={[undefined]} onMouseEnter={[undefined]} onMouseLeave={[undefined]} onFocus={[undefined]} onBlur={[undefined]} inputRef={{...}} onInputKeyDown={[Function: onInternalInputKeyDown]} onInputMouseDown={[Function: onInternalInputMouseDown]} onInputChange={[Function: onInputChange]} onInputPaste={[Function: onInputPaste]} onInputCompositionStart={[Function: onInputCompositionStart]} onInputCompositionEnd={[Function: onInputCompositionEnd]}>
                                                <CSSMotionList component={false} keys={{...}} motionName={[undefined]} motionAppear={true} />
                                                <span className=\\"ant-select-selection-search\\" style={{...}} onFocus={[Function: onFocus]} onBlur={[Function: onBlur]}>
                                                  <Input open={[undefined]} prefixCls=\\"ant-select\\" id=\\"rc_select_TEST_OR_SSR\\" inputElement={{...}} disabled={[undefined]} autoFocus={[undefined]} autoComplete={[undefined]} editable={false} accessibilityIndex={0} value=\\"\\" onKeyDown={[Function: onInternalInputKeyDown]} onMouseDown={[Function: onInternalInputMouseDown]} onChange={[Function: onInputChange]} onPaste={[Function: onInputPaste]} onCompositionStart={[Function: onInputCompositionStart]} onCompositionEnd={[Function: onInputCompositionEnd]} tabIndex={[undefined]} attrs={{...}}>
                                                    <input id=\\"rc_select_TEST_OR_SSR\\" disabled={[undefined]} tabIndex={[undefined]} autoComplete=\\"off\\" type=\\"search\\" autoFocus={[undefined]} className=\\"ant-select-selection-search-input\\" style={{...}} role=\\"combobox\\" aria-expanded={[undefined]} aria-haspopup=\\"listbox\\" aria-owns=\\"rc_select_TEST_OR_SSR_list\\" aria-autocomplete=\\"list\\" aria-controls=\\"rc_select_TEST_OR_SSR_list\\" aria-activedescendant=\\"rc_select_TEST_OR_SSR_list_0\\" value=\\"\\" maxLength={[undefined]} readOnly={true} unselectable=\\"on\\" onKeyDown={[Function: onKeyDown]} onMouseDown={[Function: onMouseDown]} onChange={[Function: onChange]} onCompositionStart={[Function: onCompositionStart]} onCompositionEnd={[Function: onCompositionEnd]} onPaste={[Function: onInputPaste]} />
                                                  </Input>
                                                  <span className=\\"ant-select-selection-search-mirror\\" aria-hidden={true}>
                                                     
                                                  </span>
                                                </span>
                                                <span className=\\"ant-select-selection-placeholder\\">
                                                  Masters
                                                </span>
                                              </SelectSelector>
                                            </div>
                                          </Selector>
                                        </Trigger>
                                      </SelectTrigger>
                                    </div>
                                  </ForwardRef(Select)>
                                </Select>
                              </ForwardRef(InternalSelect)>
                            </div>
                          </div>
                          <ErrorList errors={{...}} help={[undefined]} onDomErrorVisibleChange={[Function: setDomErrorVisible]}>
                            <CSSMotion motionDeadline={500} visible={false} motionName=\\"show-help\\" onLeaveEnd={[Function: onLeaveEnd]} motionAppear={true} removeOnLeave={true}>
                              <DomWrapper />
                            </CSSMotion>
                          </ErrorList>
                        </div>
                      </Col>
                    </FormItemInput>
                  </div>
                </Row>
              </FormItem>
            </form>
          </ForwardRef(Form)>
        </SizeContextProvider>
      </ForwardRef(InternalForm)>
      <LineChart width={1000} height={450} data={{...}} margin={{...}} layout=\\"horizontal\\" stackOffset=\\"none\\" barCategoryGap=\\"10%\\" barGap={4} reverseStackOrder={false}>
        <div className=\\"recharts-wrapper\\" style={{...}} onMouseEnter={[Function (anonymous)]} onMouseMove={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} onTouchMove={[Function (anonymous)]} onTouchStart={[Function (anonymous)]} onTouchEnd={[Function (anonymous)]}>
          <Surface width={1000} height={450}>
            <svg className=\\"recharts-surface\\" width={1000} height={450} style={[undefined]} viewBox=\\"0 0 1000 450\\" version=\\"1.1\\">
              <defs>
                <clipPath id=\\"recharts2-clip\\">
                  <rect x={80} y={5} height={410} width={890} />
                </clipPath>
              </defs>
              <CartesianGrid strokeDasharray=\\"3 3\\" horizontal={true} vertical={true} horizontalPoints={{...}} verticalPoints={{...}} stroke=\\"#ccc\\" fill=\\"none\\" verticalFill={{...}} horizontalFill={{...}} x={80} y={5} width={890} height={410} xAxis={{...}} yAxis={{...}} offset={{...}} chartWidth={1000} chartHeight={450} verticalCoordinatesGenerator={[Function (anonymous)]} horizontalCoordinatesGenerator={[Function (anonymous)]}>
                <g className=\\"recharts-cartesian-grid\\">
                  <g className=\\"recharts-cartesian-grid-horizontal\\">
                    <line strokeDasharray=\\"3 3\\" stroke=\\"#ccc\\" fill=\\"none\\" x={80} y={5} width={890} height={410} x1={80} y1={5} x2={970} y2={5} />
                    <line strokeDasharray=\\"3 3\\" stroke=\\"#ccc\\" fill=\\"none\\" x={80} y={5} width={890} height={410} x1={80} y1={415} x2={970} y2={415} />
                  </g>
                  <g className=\\"recharts-cartesian-grid-vertical\\">
                    <line strokeDasharray=\\"3 3\\" stroke=\\"#ccc\\" fill=\\"none\\" x={80} y={5} width={890} height={410} x1={80} y1={5} x2={80} y2={415} />
                    <line strokeDasharray=\\"3 3\\" stroke=\\"#ccc\\" fill=\\"none\\" x={80} y={5} width={890} height={410} x1={970} y1={5} x2={970} y2={415} />
                  </g>
                </g>
              </CartesianGrid>
              <CartesianAxis dataKey=\\"date\\" allowDecimals={true} hide={false} orientation=\\"bottom\\" width={890} height={30} mirror={false} xAxisId={0} tickCount={5} type=\\"category\\" domain={{...}} padding={{...}} allowDataOverflow={false} scale={[Function: scale] { domain: [Function (anonymous)], range: [Function (anonymous)], copy: [Function (anonymous)], rangeRound: [Function (anonymous)], bandwidth: [Function (anonymous)], step: [Function (anonymous)], round: [Function (anonymous)], padding: [Function (anonymous)], align: [Function (anonymous)] }} reversed={false} allowDuplicatedCategory={true} axisType=\\"xAxis\\" categoricalDomain={[undefined]} duplicateDomain={[undefined]} originalDomain={{...}} isCategorial={true} layout=\\"horizontal\\" realScaleType=\\"point\\" x={80} y={415} bandSize={0} className=\\"recharts-xAxis xAxis\\" viewBox={{...}} ticksGenerator={[Function (anonymous)]} ticks={{...}} stroke=\\"#666\\" tickLine={true} axisLine={true} tick={true} minTickGap={5} tickSize={6} tickMargin={2} interval=\\"preserveEnd\\" />
              <CartesianAxis label={{...}} allowDuplicatedCategory={true} allowDecimals={true} hide={false} orientation=\\"left\\" width={60} height={410} mirror={false} yAxisId={0} tickCount={5} type=\\"number\\" domain={{...}} padding={{...}} allowDataOverflow={false} scale={[Function: scale] { invert: [Function (anonymous)], domain: [Function (anonymous)], range: [Function (anonymous)], rangeRound: [Function (anonymous)], clamp: [Function (anonymous)], interpolate: [Function (anonymous)], unknown: [Function (anonymous)], copy: [Function (anonymous)], ticks: [Function (anonymous)], tickFormat: [Function (anonymous)], nice: [Function (anonymous)] }} reversed={false} axisType=\\"yAxis\\" categoricalDomain={[undefined]} duplicateDomain={[undefined]} originalDomain={{...}} isCategorial={false} layout=\\"horizontal\\" niceTicks={{...}} realScaleType=\\"linear\\" x={20} y={5} bandSize={0} className=\\"recharts-yAxis yAxis\\" viewBox={{...}} ticksGenerator={[Function (anonymous)]} ticks={{...}} stroke=\\"#666\\" tickLine={true} axisLine={true} tick={true} minTickGap={5} tickSize={6} tickMargin={2} interval=\\"preserveEnd\\">
                <Layer className=\\"recharts-cartesian-axis recharts-yAxis yAxis\\">
                  <g className=\\"recharts-layer recharts-cartesian-axis recharts-yAxis yAxis\\">
                    <line className=\\"recharts-cartesian-axis-line\\" width={60} height={410} x={20} y={5} stroke=\\"#666\\" fill=\\"none\\" x1={80} y1={5} x2={80} y2={415} />
                    <g className=\\"recharts-cartesian-axis-ticks\\" />
                    <Label viewBox={{...}} value=\\"Q u a n t i t y\\" angle={-90} position=\\"insideLeft\\" offset={5}>
                      <Text className=\\"recharts-label\\" angle={-90} x={25} y={210} textAnchor=\\"start\\" verticalAnchor=\\"middle\\" lineHeight=\\"1em\\" capHeight=\\"0.71em\\" scaleToFit={false}>
                        <text x={25} y={210} transform=\\"rotate(-90, 25, 210)\\" className=\\"recharts-text recharts-label\\" textAnchor=\\"start\\">
                          <tspan x={25} dy=\\"0.355em\\">
                            Q u a n t i t y
                          </tspan>
                        </text>
                      </Text>
                    </Label>
                  </g>
                </Layer>
              </CartesianAxis>
              <Line type=\\"monotone\\" dataKey=\\"orders\\" stroke=\\"#376af0\\" xAxisId={0} yAxisId={0} connectNulls={false} activeDot={true} dot={true} legendType=\\"line\\" strokeWidth={1} fill=\\"#fff\\" points={{...}} isAnimationActive={true} animateNewValues={true} animationBegin={0} animationDuration={1500} animationEasing=\\"ease\\" hide={false} onAnimationStart={[Function: onAnimationStart]} onAnimationEnd={[Function: onAnimationEnd]} layout=\\"horizontal\\" brushBottom={35} top={5} bottom={35} left={80} right={30} width={890} height={410} yAxis={{...}} xAxis={{...}} animationId={1} />
            </svg>
          </Surface>
          <Legend iconSize={14} layout=\\"horizontal\\" align=\\"center\\" verticalAlign=\\"bottom\\" width={950} payload={{...}} chartWidth={1000} chartHeight={450} margin={{...}} onBBoxUpdate={[Function (anonymous)]}>
            <div className=\\"recharts-legend-wrapper\\" style={{...}}>
              <Legend iconSize={14} layout=\\"horizontal\\" align=\\"center\\" verticalAlign=\\"bottom\\" width={950} payload={{...}} chartWidth={1000} chartHeight={450} margin={{...}} onBBoxUpdate={[Function (anonymous)]} inactiveColor=\\"#ccc\\">
                <ul className=\\"recharts-default-legend\\" style={{...}}>
                  <li className=\\"recharts-legend-item legend-item-0\\" style={{...}}>
                    <Surface width={14} height={14} viewBox={{...}} style={{...}}>
                      <svg className=\\"recharts-surface\\" width={14} height={14} style={{...}} viewBox=\\"0 0 32 32\\" version=\\"1.1\\">
                        <path strokeWidth={4} fill=\\"none\\" stroke=\\"#376af0\\" d=\\"M0,16h10.666666666666666\\\\n            A5.333333333333333,5.333333333333333,0,1,1,21.333333333333332,16\\\\n            H32M21.333333333333332,16\\\\n            A5.333333333333333,5.333333333333333,0,1,1,10.666666666666666,16\\" className=\\"recharts-legend-icon\\" />
                      </svg>
                    </Surface>
                    <span className=\\"recharts-legend-item-text\\">
                      orders
                    </span>
                  </li>
                </ul>
              </Legend>
            </div>
          </Legend>
          <Tooltip active={false} allowEscapeViewBox={{...}} offset={10} viewBox={{...}} coordinate={{...}} cursorStyle={{...}} separator=\\" : \\" wrapperStyle={{...}} contentStyle={{...}} itemStyle={{...}} labelStyle={{...}} cursor={true} isAnimationActive={true} animationEasing=\\"ease\\" animationDuration={400} filterNull={true} useTranslate3d={false} label={[undefined]} payload={{...}}>
            <div className=\\"recharts-tooltip-wrapper\\" style={{...}}>
              <DefaultTooltipContent active={false} allowEscapeViewBox={{...}} offset={10} viewBox={{...}} coordinate={{...}} cursorStyle={{...}} separator=\\" : \\" wrapperStyle={{...}} contentStyle={{...}} itemStyle={{...}} labelStyle={{...}} cursor={true} isAnimationActive={true} animationEasing=\\"ease\\" animationDuration={400} filterNull={true} useTranslate3d={false} label={[undefined]} payload={{...}}>
                <div className=\\"recharts-default-tooltip\\" style={{...}}>
                  <p className=\\"recharts-tooltip-label\\" style={{...}} />
                </div>
              </DefaultTooltipContent>
            </div>
          </Tooltip>
        </div>
      </LineChart>
      <div className=\\"wrapper_pie_chart\\">
        <PieChart width={550} height={420} layout=\\"centric\\" stackOffset=\\"none\\" barCategoryGap=\\"10%\\" barGap={4} margin={{...}} reverseStackOrder={false} startAngle={0} endAngle={360} cx=\\"50%\\" cy=\\"50%\\" innerRadius={0} outerRadius=\\"80%\\">
          <div className=\\"recharts-wrapper\\" style={{...}}>
            <Surface width={550} height={420}>
              <svg className=\\"recharts-surface\\" width={550} height={420} style={[undefined]} viewBox=\\"0 0 550 420\\" version=\\"1.1\\">
                <defs>
                  <clipPath id=\\"recharts4-clip\\">
                    <rect x={5} y={5} height={410} width={540} />
                  </clipPath>
                </defs>
                <Pie data={{...}} dataKey=\\"orders\\" cx={275} cy={210} outerRadius={175} label={true} stroke=\\"#fff\\" fill=\\"#808080\\" legendType=\\"rect\\" startAngle={0} endAngle={360} innerRadius={0} paddingAngle={0} labelLine={true} hide={false} minAngle={0} isAnimationActive={true} animationBegin={400} animationDuration={1500} animationEasing=\\"ease\\" nameKey=\\"name\\" blendStroke={false} maxRadius={339.00589965367857} sectors={[undefined]} onMouseLeave={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} radiusAxis={{...}} angleAxis={{...}} animationId={1} />
              </svg>
            </Surface>
            <Legend layout=\\"vertical\\" align=\\"right\\" verticalAlign=\\"middle\\" iconSize={14} payload={{...}} chartWidth={550} chartHeight={420} margin={{...}} onBBoxUpdate={[Function (anonymous)]}>
              <div className=\\"recharts-legend-wrapper\\" style={{...}}>
                <Legend layout=\\"vertical\\" align=\\"right\\" verticalAlign=\\"middle\\" iconSize={14} payload={{...}} chartWidth={550} chartHeight={420} margin={{...}} onBBoxUpdate={[Function (anonymous)]} inactiveColor=\\"#ccc\\">
                  <ul className=\\"recharts-default-legend\\" style={{...}}>
                    <li className=\\"recharts-legend-item legend-item-0\\" style={{...}}>
                      <Surface width={14} height={14} viewBox={{...}} style={{...}}>
                        <svg className=\\"recharts-surface\\" width={14} height={14} style={{...}} viewBox=\\"0 0 32 32\\" version=\\"1.1\\">
                          <path stroke=\\"none\\" fill=\\"#1485ff\\" d=\\"M0,4h32v24h-32z\\" className=\\"recharts-legend-icon\\" />
                        </svg>
                      </Surface>
                      <span className=\\"recharts-legend-item-text\\">
                        Others
                      </span>
                    </li>
                  </ul>
                </Legend>
              </div>
            </Legend>
          </div>
        </PieChart>
        <PieChart width={550} height={420} layout=\\"centric\\" stackOffset=\\"none\\" barCategoryGap=\\"10%\\" barGap={4} margin={{...}} reverseStackOrder={false} startAngle={0} endAngle={360} cx=\\"50%\\" cy=\\"50%\\" innerRadius={0} outerRadius=\\"80%\\">
          <div className=\\"recharts-wrapper\\" style={{...}}>
            <Surface width={550} height={420}>
              <svg className=\\"recharts-surface\\" width={550} height={420} style={[undefined]} viewBox=\\"0 0 550 420\\" version=\\"1.1\\">
                <defs>
                  <clipPath id=\\"recharts6-clip\\">
                    <rect x={5} y={5} height={410} width={540} />
                  </clipPath>
                </defs>
                <Pie data={{...}} dataKey=\\"orders\\" cx={275} cy={210} outerRadius={175} label={true} stroke=\\"#fff\\" fill=\\"#808080\\" legendType=\\"rect\\" startAngle={0} endAngle={360} innerRadius={0} paddingAngle={0} labelLine={true} hide={false} minAngle={0} isAnimationActive={true} animationBegin={400} animationDuration={1500} animationEasing=\\"ease\\" nameKey=\\"name\\" blendStroke={false} maxRadius={339.00589965367857} sectors={[undefined]} onMouseLeave={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} radiusAxis={{...}} angleAxis={{...}} animationId={1} />
              </svg>
            </Surface>
            <Legend layout=\\"vertical\\" align=\\"right\\" verticalAlign=\\"middle\\" iconSize={14} payload={{...}} chartWidth={550} chartHeight={420} margin={{...}} onBBoxUpdate={[Function (anonymous)]}>
              <div className=\\"recharts-legend-wrapper\\" style={{...}}>
                <Legend layout=\\"vertical\\" align=\\"right\\" verticalAlign=\\"middle\\" iconSize={14} payload={{...}} chartWidth={550} chartHeight={420} margin={{...}} onBBoxUpdate={[Function (anonymous)]} inactiveColor=\\"#ccc\\">
                  <ul className=\\"recharts-default-legend\\" style={{...}}>
                    <li className=\\"recharts-legend-item legend-item-0\\" style={{...}}>
                      <Surface width={14} height={14} viewBox={{...}} style={{...}}>
                        <svg className=\\"recharts-surface\\" width={14} height={14} style={{...}} viewBox=\\"0 0 32 32\\" version=\\"1.1\\">
                          <path stroke=\\"none\\" fill=\\"#1485ff\\" d=\\"M0,4h32v24h-32z\\" className=\\"recharts-legend-icon\\" />
                        </svg>
                      </Surface>
                      <span className=\\"recharts-legend-item-text\\">
                        Others
                      </span>
                    </li>
                  </ul>
                </Legend>
              </div>
            </Legend>
          </div>
        </PieChart>
      </div>
      <Table bordered={true} className=\\"summary_table\\" pagination={false} columns={{...}} dataSource={{...}} rowKey=\\"key\\">
        <div className=\\"ant-table-wrapper summary_table\\" style={[undefined]}>
          <Spin spinning={false} size=\\"default\\" wrapperClassName=\\"\\">
            <div className=\\"ant-spin-nested-loading\\">
              <div className=\\"ant-spin-container\\">
                <Table bordered={true} pagination={false} dataSource={{...}} rowKey={[Function (anonymous)]} columns={{...}} direction={[undefined]} expandable={{...}} prefixCls=\\"ant-table\\" className=\\"ant-table-bordered\\" data={{...}} rowClassName={[Function: internalRowClassName]} emptyText={{...}} internalHooks=\\"rc-table-internal-hook\\" internalRefs={{...}} transformColumns={[Function (anonymous)]}>
                  <div className=\\"ant-table ant-table-bordered\\" style={[undefined]} id={[undefined]}>
                    <Component pingLeft={false} pingRight={false} props={{...}}>
                      <div className=\\"ant-table-container\\">
                        <div style={{...}} className=\\"ant-table-content\\" onScroll={[Function: onScroll]}>
                          <table style={{...}}>
                            <ColGroup colWidths={{...}} columns={{...}}>
                              <colgroup />
                            </ColGroup>
                            <Header colWidths={{...}} columCount={8} stickyOffsets={{...}} onHeaderRow={[undefined]} fixHeader={[undefined]} columns={{...}} flattenColumns={{...}}>
                              <thead className=\\"ant-table-thead\\">
                                <HeaderRow flattenColumns={{...}} cells={{...}} stickyOffsets={{...}} rowComponent=\\"tr\\" cellComponent=\\"th\\" onHeaderRow={[undefined]} index={0}>
                                  <tr>
                                    <Cell className=\\"\\" column={{...}} colStart={0} colSpan={1} colEnd={0} rowSpan={1} ellipsis={[undefined]} align={[undefined]} component=\\"th\\" prefixCls=\\"ant-table\\" fixLeft={[undefined]} fixRight={[undefined]} lastFixLeft={false} firstFixRight={false} lastFixRight={false} firstFixLeft={false} isSticky={[undefined]} additionalProps={[undefined]} rowType=\\"header\\">
                                      <th title={[undefined]} colSpan={{...}} rowSpan={{...}} className=\\"ant-table-cell\\" style={{...}} />
                                    </Cell>
                                    <Cell className=\\"\\" column={{...}} colStart={1} colSpan={1} colEnd={1} rowSpan={1} ellipsis={[undefined]} align={[undefined]} component=\\"th\\" prefixCls=\\"ant-table\\" fixLeft={[undefined]} fixRight={[undefined]} lastFixLeft={false} firstFixRight={false} lastFixRight={false} firstFixLeft={false} isSticky={[undefined]} additionalProps={[undefined]} rowType=\\"header\\">
                                      <th title={[undefined]} colSpan={{...}} rowSpan={{...}} className=\\"ant-table-cell\\" style={{...}}>
                                        Total
                                      </th>
                                    </Cell>
                                    <Cell className=\\"\\" column={{...}} colStart={2} colSpan={1} colEnd={2} rowSpan={1} ellipsis={[undefined]} align={[undefined]} component=\\"th\\" prefixCls=\\"ant-table\\" fixLeft={[undefined]} fixRight={[undefined]} lastFixLeft={false} firstFixRight={false} lastFixRight={false} firstFixLeft={false} isSticky={[undefined]} additionalProps={[undefined]} rowType=\\"header\\">
                                      <th title={[undefined]} colSpan={{...}} rowSpan={{...}} className=\\"ant-table-cell\\" style={{...}}>
                                        Small
                                      </th>
                                    </Cell>
                                    <Cell className=\\"\\" column={{...}} colStart={3} colSpan={1} colEnd={3} rowSpan={1} ellipsis={[undefined]} align={[undefined]} component=\\"th\\" prefixCls=\\"ant-table\\" fixLeft={[undefined]} fixRight={[undefined]} lastFixLeft={false} firstFixRight={false} lastFixRight={false} firstFixLeft={false} isSticky={[undefined]} additionalProps={[undefined]} rowType=\\"header\\">
                                      <th title={[undefined]} colSpan={{...}} rowSpan={{...}} className=\\"ant-table-cell\\" style={{...}}>
                                        Medium
                                      </th>
                                    </Cell>
                                    <Cell className=\\"\\" column={{...}} colStart={4} colSpan={1} colEnd={4} rowSpan={1} ellipsis={[undefined]} align={[undefined]} component=\\"th\\" prefixCls=\\"ant-table\\" fixLeft={[undefined]} fixRight={[undefined]} lastFixLeft={false} firstFixRight={false} lastFixRight={false} firstFixLeft={false} isSticky={[undefined]} additionalProps={[undefined]} rowType=\\"header\\">
                                      <th title={[undefined]} colSpan={{...}} rowSpan={{...}} className=\\"ant-table-cell\\" style={{...}}>
                                        Large
                                      </th>
                                    </Cell>
                                    <Cell className=\\"\\" column={{...}} colStart={5} colSpan={1} colEnd={5} rowSpan={1} ellipsis={[undefined]} align={[undefined]} component=\\"th\\" prefixCls=\\"ant-table\\" fixLeft={[undefined]} fixRight={[undefined]} lastFixLeft={false} firstFixRight={false} lastFixRight={false} firstFixLeft={false} isSticky={[undefined]} additionalProps={[undefined]} rowType=\\"header\\">
                                      <th title={[undefined]} colSpan={{...}} rowSpan={{...}} className=\\"ant-table-cell\\" style={{...}}>
                                        Completed
                                      </th>
                                    </Cell>
                                    <Cell className=\\"\\" column={{...}} colStart={6} colSpan={1} colEnd={6} rowSpan={1} ellipsis={[undefined]} align={[undefined]} component=\\"th\\" prefixCls=\\"ant-table\\" fixLeft={[undefined]} fixRight={[undefined]} lastFixLeft={false} firstFixRight={false} lastFixRight={false} firstFixLeft={false} isSticky={[undefined]} additionalProps={[undefined]} rowType=\\"header\\">
                                      <th title={[undefined]} colSpan={{...}} rowSpan={{...}} className=\\"ant-table-cell\\" style={{...}}>
                                        Incompleted
                                      </th>
                                    </Cell>
                                    <Cell className=\\"\\" column={{...}} colStart={7} colSpan={1} colEnd={7} rowSpan={1} ellipsis={[undefined]} align={[undefined]} component=\\"th\\" prefixCls=\\"ant-table\\" fixLeft={[undefined]} fixRight={[undefined]} lastFixLeft={false} firstFixRight={false} lastFixRight={false} firstFixLeft={false} isSticky={[undefined]} additionalProps={[undefined]} rowType=\\"header\\">
                                      <th title={[undefined]} colSpan={{...}} rowSpan={{...}} className=\\"ant-table-cell\\" style={{...}}>
                                        Cash amount
                                      </th>
                                    </Cell>
                                  </tr>
                                </HeaderRow>
                              </thead>
                            </Header>
                            <Body data={{...}} measureColumnWidth={false} expandedKeys={{...}} rowExpandable={[undefined]} getRowKey={[Function (anonymous)]} onRow={[undefined]} emptyNode={{...}} childrenColumnName=\\"children\\">
                              <tbody className=\\"ant-table-tbody\\">
                                <BodyRow rowKey={0} record={{...}} recordKey={0} index={0} rowComponent=\\"tr\\" cellComponent=\\"td\\" expandedKeys={{...}} onRow={[undefined]} getRowKey={[Function (anonymous)]} rowExpandable={[undefined]} childrenColumnName=\\"children\\">
                                  <tr data-row-key={0} className=\\"ant-table-row ant-table-row-level-0\\" style={{...}} onClick={[Function: onClick]}>
                                    <Cell className={[undefined]} ellipsis={[undefined]} align={[undefined]} component=\\"td\\" prefixCls=\\"ant-table\\" record={{...}} index={0} dataIndex=\\"name\\" render={[undefined]} shouldCellUpdate={[undefined]} fixLeft={[undefined]} fixRight={[undefined]} lastFixLeft={false} firstFixRight={false} lastFixRight={false} firstFixLeft={false} isSticky={[undefined]} appendNode={[undefined]} additionalProps={[undefined]}>
                                      <td title={[undefined]} colSpan={{...}} rowSpan={{...}} className=\\"ant-table-cell\\" style={{...}}>
                                        All
                                      </td>
                                    </Cell>
                                    <Cell className={[undefined]} ellipsis={[undefined]} align={[undefined]} component=\\"td\\" prefixCls=\\"ant-table\\" record={{...}} index={0} dataIndex=\\"total\\" render={[undefined]} shouldCellUpdate={[undefined]} fixLeft={[undefined]} fixRight={[undefined]} lastFixLeft={false} firstFixRight={false} lastFixRight={false} firstFixLeft={false} isSticky={[undefined]} appendNode={[undefined]} additionalProps={[undefined]}>
                                      <td title={[undefined]} colSpan={{...}} rowSpan={{...}} className=\\"ant-table-cell\\" style={{...}}>
                                        0
                                      </td>
                                    </Cell>
                                    <Cell className={[undefined]} ellipsis={[undefined]} align={[undefined]} component=\\"td\\" prefixCls=\\"ant-table\\" record={{...}} index={0} dataIndex=\\"small\\" render={[undefined]} shouldCellUpdate={[undefined]} fixLeft={[undefined]} fixRight={[undefined]} lastFixLeft={false} firstFixRight={false} lastFixRight={false} firstFixLeft={false} isSticky={[undefined]} appendNode={[undefined]} additionalProps={[undefined]}>
                                      <td title={[undefined]} colSpan={{...}} rowSpan={{...}} className=\\"ant-table-cell\\" style={{...}}>
                                        0
                                      </td>
                                    </Cell>
                                    <Cell className={[undefined]} ellipsis={[undefined]} align={[undefined]} component=\\"td\\" prefixCls=\\"ant-table\\" record={{...}} index={0} dataIndex=\\"medium\\" render={[undefined]} shouldCellUpdate={[undefined]} fixLeft={[undefined]} fixRight={[undefined]} lastFixLeft={false} firstFixRight={false} lastFixRight={false} firstFixLeft={false} isSticky={[undefined]} appendNode={[undefined]} additionalProps={[undefined]}>
                                      <td title={[undefined]} colSpan={{...}} rowSpan={{...}} className=\\"ant-table-cell\\" style={{...}}>
                                        0
                                      </td>
                                    </Cell>
                                    <Cell className={[undefined]} ellipsis={[undefined]} align={[undefined]} component=\\"td\\" prefixCls=\\"ant-table\\" record={{...}} index={0} dataIndex=\\"large\\" render={[undefined]} shouldCellUpdate={[undefined]} fixLeft={[undefined]} fixRight={[undefined]} lastFixLeft={false} firstFixRight={false} lastFixRight={false} firstFixLeft={false} isSticky={[undefined]} appendNode={[undefined]} additionalProps={[undefined]}>
                                      <td title={[undefined]} colSpan={{...}} rowSpan={{...}} className=\\"ant-table-cell\\" style={{...}}>
                                        0
                                      </td>
                                    </Cell>
                                    <Cell className={[undefined]} ellipsis={[undefined]} align={[undefined]} component=\\"td\\" prefixCls=\\"ant-table\\" record={{...}} index={0} dataIndex=\\"completed\\" render={[undefined]} shouldCellUpdate={[undefined]} fixLeft={[undefined]} fixRight={[undefined]} lastFixLeft={false} firstFixRight={false} lastFixRight={false} firstFixLeft={false} isSticky={[undefined]} appendNode={[undefined]} additionalProps={[undefined]}>
                                      <td title={[undefined]} colSpan={{...}} rowSpan={{...}} className=\\"ant-table-cell\\" style={{...}}>
                                        0
                                      </td>
                                    </Cell>
                                    <Cell className={[undefined]} ellipsis={[undefined]} align={[undefined]} component=\\"td\\" prefixCls=\\"ant-table\\" record={{...}} index={0} dataIndex=\\"incompleted\\" render={[undefined]} shouldCellUpdate={[undefined]} fixLeft={[undefined]} fixRight={[undefined]} lastFixLeft={false} firstFixRight={false} lastFixRight={false} firstFixLeft={false} isSticky={[undefined]} appendNode={[undefined]} additionalProps={[undefined]}>
                                      <td title={[undefined]} colSpan={{...}} rowSpan={{...}} className=\\"ant-table-cell\\" style={{...}}>
                                        0
                                      </td>
                                    </Cell>
                                    <Cell className={[undefined]} ellipsis={[undefined]} align={[undefined]} component=\\"td\\" prefixCls=\\"ant-table\\" record={{...}} index={0} dataIndex=\\"cash_amount\\" render={[undefined]} shouldCellUpdate={[undefined]} fixLeft={[undefined]} fixRight={[undefined]} lastFixLeft={false} firstFixRight={false} lastFixRight={false} firstFixLeft={false} isSticky={[undefined]} appendNode={[undefined]} additionalProps={[undefined]}>
                                      <td title={[undefined]} colSpan={{...}} rowSpan={{...}} className=\\"ant-table-cell\\" style={{...}}>
                                        0
                                      </td>
                                    </Cell>
                                  </tr>
                                </BodyRow>
                              </tbody>
                            </Body>
                          </table>
                        </div>
                      </div>
                    </Component>
                  </div>
                </Table>
              </div>
            </div>
          </Spin>
        </div>
      </Table>
    </div>
  </Diagrams>
</Provider>"
`;
